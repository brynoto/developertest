<?php
//Rhey Bryan Noto
//rhey_noto@yahoo.com
//226-998-2843
//1
// In a Fibonacci sequence, each new term is generated by adding the previous two terms. By starting with 0 and 1, the first 10 terms will be:
// 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, â€¦
// Create a program that accepts a parameterized value for the max Fibonacci value. The program should finds the terms in the Fibonacci sequence whose values do not exceed the parameterized value and then provides the sum of the odd-valued terms. 
// For example, for a parameterized value of 22, the Fibonacci sequence
// would be 0, 1, 1, 2, 3, 5, 8, 13, 21 and the sum of the odd-values would
// be: 44

function fibonacci($num){
  $num1 = 0;
  $num2 = 1;
  $output = 0;

  for($x = 0; $x <= $num; $x++) {
    $output = $num1 + $num2;
    $num1 = $num2;
    $num2 = $output;

    echo $output . "<br>";
  }
}

//Call function fibonacci
fibonacci(22);
echo '<br>';

//2
// This link is to a CSV (Comma Separated values) file which contains people's first name, last name, address and province. All of the values are separated by commas. Please open the CSV file in a separate browser tab/window. You can then download the file by selecting File -> Download -> Comma-Separated values
// Please create a program to process the CSV file and only output the
// residents of Ontario.
// HINT: You should use a library to read and handle the CSV file rather than creating your own functions for parsing the file.

require 'vendor/autoload.php';
use League\Csv\Reader;

function process_csv() {
  $csv = Reader::createFromPath('./address.csv', 'r')->setHeaderOffset(0);

  echo "<pre>";
  foreach ($csv->getRecords() as $key => $row) {
      if ($row['Province'] === 'Ontario') {
          show($row);
      }
  }
}

function show(Array $arr) {
  print_r($arr);
}

process_csv();
?>